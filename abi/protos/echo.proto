syntax = "proto3";
package echo;

import "google/protobuf/empty.proto";
service ChannelService {
  // For users
  // List specific or all channels depending on channel's id, and only id will be useful
  rpc List(Channel) returns (ListResponse);
  // Create a Channel, then the user will be owner
  rpc Create(Channel) returns (Channel);
  // Delete some Channel which only contains id, the executor must be its owner or admin
  rpc Delete(Channel) returns (google.protobuf.Empty);
  // Listen or Join some channel which only contains id
  rpc Listen (Channel) returns (ListenResponse);

  // For channel servers
  // Report something periodically
  rpc Report(stream ReportRequest) returns (stream ReportResponse);
}

// For specific channel server
service ChatService {
  // For users
  // Connect by websocket, user can send and recv message, disconnect means quit
  rpc Conn(stream Message) returns (stream Message);

  // For manager
  // Channel's users must be empty
  rpc Add(stream Channel) returns (google.protobuf.Empty);
  // Only id
  rpc Remove(stream Channel) returns (google.protobuf.Empty);
  // Shutdown some user-channel's connection
  rpc Shutdown(ShutdownRequest) returns (google.protobuf.Empty);
}

// Service about User Opts
service UserService {
  rpc Register(RegisterRequest) returns (google.protobuf.Empty);
  rpc Login(LoginRequest) returns (LoginResponse);
}

message User {
  string id = 1;
  string name = 2;
}

message Channel {
  int32 id = 1;
  string name = 2;
  repeated User users = 3;
  int32 limit = 4; // limit the num of users

}

message ShutdownRequest {
  optional string user_id = 1; // when empty, shutdown all users
  int32 channel_id = 2;
}

message ListResponse {
  repeated Channel channels = 1;
}

message ChannelServer {
  string id = 1;
  string addr = 2;
  string name = 3;
  repeated Channel channels = 4;
}

message ListenResponse {
  ChannelServer server = 1; // server.channels = []
  string token = 2; // for user to connect the channel on the server
}

message ReportRequest {
  Metric metric = 1;
  // channels being served
  repeated Channel channels = 2;
}

message ReportResponse {
  optional ShutdownRequest shutdown = 1;
}

// Metric like a heartbeat
message Metric {
  map<string, string> kv = 1;
}

message RegisterRequest {
  string user_id = 1;
  string password = 2;
  string name = 3;
}

message LoginRequest {
  string user_id = 1;
  string password = 2;
}

message LoginResponse {
  string token = 1;
}

message Message {
  string user_id = 1;
  int64 timestamp = 2;
  bytes data = 3;
}
